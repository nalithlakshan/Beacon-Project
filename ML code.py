# -*- coding: utf-8 -*-
"""BLE_Learning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xmfik1E2vAp4VaZVIarzhopy3vHf2ybA
"""

# 1. Importing libraries
import pandas as pd  
import numpy as np
import json
import os
import ast
import csv
import matplotlib.pyplot as plt
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split  
from sklearn.metrics import classification_report, confusion_matrix,accuracy_score 
from sklearn.preprocessing import OneHotEncoder,StandardScaler
import time

#Reading data from csv file
wifiData = pd.read_csv("https://raw.githubusercontent.com/thilinawee/Data-Sets/master/IoTFinalTest_6_00_5K.csv")

#Preprocessing data
x = wifiData[['B1','B3','B4','B5','B6','B7','B8','B9','B10','B11','B12','B13','B14','B15']]  #contains attributes
x = x.fillna(-200)
x.head()

plt = df['Group'].value_counts().plot(kind ='bar')

#create train and test sets
X_train, X_test, y_train, y_test = train_test_split(x, y, test_size = 0.1,random_state = 47)

# SVM algorithm
svclassifier = SVC(kernel='poly',degree = 4) 
t0 = time.time() 
svclassifier.fit(X_train, y_train) 
print("Training time:",round(time.time()-t0,4),"s")

t1 = time.time()
y_pred = svclassifier.predict(X_test)
print("Predicting time:",round(time.time()-t1,4),"s")

print("\nConfusion Matrix:")
print(confusion_matrix(y_test,y_pred))
print("\nClassification Report:")
print(classification_report(y_test,y_pred))

# Random Forest Model
from sklearn.ensemble import RandomForestClassifier

regressor = RandomForestClassifier(n_estimators=20, random_state=0)
t0 = time.time()
regressor.fit(X_train, y_train)
print("Training time:",round(time.time()-t0,4),"s")
t1 = time.time()
y_pred = regressor.predict(X_test)
print("Predicting time:",round(time.time()-t1,4),"s")

print("\nConfusion Matrix:")
print(confusion_matrix(y_test,y_pred))
print("\nClassification Report:")
print(classification_report(y_test,y_pred))

#K Nearest Neighbors Model

from sklearn.neighbors import KNeighborsClassifier

knn = KNeighborsClassifier()
t0 = time.time()
knn.fit(X_train, y_train)
print("Training time:",round(time.time()-t0,4),"s")
t1 = time.time()
y_pred = knn.predict(X_test)
print("Predicting time:",round(time.time()-t1,4),"s")
print("\nConfusion Matrix:")
print(confusion_matrix(y_test,y_pred))
print("\nClassification Report:")
print(classification_report(y_test,y_pred))